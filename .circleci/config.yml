version: 2

resource_job_defaults: &resource_job_defaults
  docker:  [{image: 'circleci/ruby:2.4.1'}]
  steps:
    - run:
        name: verify required Environment Variables
        command: |
          if [ -z "${CIRCLE_HOSTNAME}" -o -z "${CIRCLE_TOKEN}" ];then
            echo "You must provide 2 Environment Variables in project settings for this job to run."
            echo "CIRCLE_HOSTNAME: Should be the scheme://domain of your install. \"https://ci.example.com\""
            echo "CIRCLE_TOKEN: Should be the API Key of an admin or project level with Scope:All"
            exit 1
          fi
    - run:
        name: verify that job ran with the requested resource_class option
        command: |
          curl -k \
          "${CIRCLE_HOSTNAME%/}/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM?\
          circle-token=$CIRCLE_TOKEN" | \
          jq '.picard.resource_class.class' | grep $CIRCLE_JOB

remote_docker_defaults: &remote_docker_defaults
  docker: [{image: 'docker:17.06-git'}]

basic_docker_build: &basic_docker_build
  name: "Build a really basic docker image"
  command: |
    dockerfile=Dockerfile
    echo "FROM alpine:latest" > $dockerfile
    echo "RUN echo hello" >> $dockerfile
    docker build -f $dockerfile --tag throwaway:$CIRCLE_BUILD_NUM .
    docker run --rm throwaway:$CIRCLE_BUILD_NUM

contexts_defaults: &contexts_defaults
  docker: [{image: 'alpine:latest'}]
  working_directory: /a/contexts/test

workspaces_defaults: &workspaces_defaults
  docker: [{image: 'circleci/node:latest'}]
  working_directory: ~/foo/bar

jobs:
  # resource class jobs
  small: # 1 vCPU, 2GB RAM
    <<: *resource_job_defaults
    resource_class: small

  medium: # 2 vCPUs, 4GB RAM
    <<: *resource_job_defaults
    resource_class: medium

  medium+: # 3 vCPUs, 6GB RAM
    <<: *resource_job_defaults
    resource_class: medium+

  large: # 4 vCPUs, 8GB RAM
    <<: *resource_job_defaults
    resource_class: large

  xlarge: # 8 vCPUs, 16GB RAM
    <<: *resource_job_defaults
    resource_class: xlarge

  # vm jobs
  machine:
    machine: true
    steps:
      - run:
          <<: *basic_docker_build
      - run: |
          echo $SLEEP
          date
          sleep $SLEEP
          date
          echo 'Done sleeping.'
    environment:
      SLEEP: 1

  remote_docker:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker
      - run:
          <<: *basic_docker_build
      - run: docker version

  docker_layer_caching:
    <<: *remote_docker_defaults
    steps:
      - run: which docker
      - run: docker -v
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          <<: *basic_docker_build
      - run: docker version

  runner:
    machine: true
    resource_class: danmux/dans-mac
    steps:
      - run: echo "Hi I'm a Runner job on a macos MBP"
      - run:
          name: Clear working directory
          command: |
            rm -rf $CIRCLE_WORKING_DIRECTORY
            mkdir $CIRCLE_WORKING_DIRECTORY
      - run: mkdir -p tmp/depcache; echo 'my cached file' > tmp/depcache/cached.txt
      - save_cache:
          key: depcache-v1-{{ .BuildNum }}
          paths:
            - tmp/depcache
      - run: rm -r tmp/depcache
      - restore_cache:
          key: depcache-v1-{{ .BuildNum }}
      - run:
          name: Verify cache
          command: |
            [ "$(cat tmp/depcache/cached.txt)" == 'my cached file' ]

      # upload artifacts!
      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir -p /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;
      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt
      - store_artifacts:
          path: /tmp/artifacts

      # save some test results 
      - run:
          name: Create some test results
          command: |
            mkdir -p test-results
            mkdir -p test-results2
            cat <<XML > test-results/junit.xml
            <testsuite tests="3">
              <testcase classname="foo1" name="ASuccessfulTest"/>
              <testcase classname="foo2" name="AnotherSuccessfulTest"/>
              <testcase classname="foo3" name="AFailingTest">
                <failure type="NotEnoughFoo"> details about failure </failure>
              </testcase>
            </testsuite>
            XML
            cp test-results/junit.xml test-results2/junit.xml
      - store_test_results:
          path: test-results
      - store_test_results:
          path: test-results2
      - store_artifacts:
          path: test-results

      # Persist a workspace
      - run: |
          echo "workspace" > workspace.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace.txt

    
  machine_dlc:
    machine:
      docker_layer_caching: true
    steps:
      - run: which docker
      - run: docker -v
      - run:
          <<: *basic_docker_build
      - run: docker version

  # feature jobs
  contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep CONTEXT_END_TO_END_TEST_VAR

  multi-contexts:
    <<: *contexts_defaults
    steps:
      - run: env | grep MULTI_CONTEXT_END_TO_END_VAR

  write_workspace:
    <<: *workspaces_defaults
    steps:
      - run: mkdir stuff
      - run: echo 5 >./stuff/thing
      - persist_to_workspace:
          root: .
          paths:
            - stuff

  read_workspace:
    <<: *workspaces_defaults
    steps:
      - attach_workspace:
           at: ./attached
      - run: |
          if [[ $(< ./attached/stuff/thing) != '5' ]]; then
            echo 'Sadness, the value is not what we expected, so the workspace write/read did not work'
            exit 1
          else
            echo 'Yay, value matches'
            exit 0
          fi

  save_and_restore_cache:
    docker:
      - image: circleci/python
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run: mkdir -p stuff
      - run: echo 5 >./stuff/thing

      - save_cache:
          key: v3-file-cache-{{ .BuildNum }}
          paths:
            - ./stuff/thing

      - run: rm -rf ./stuff/thing
      - run: sleep 5

      - restore_cache:
            keys:
              - v3-file-cache-{{ .BuildNum }}

      - run: |
            if [[ $(< stuff/thing) != '5' ]]; then
              exit 1
            else
              echo "The cache was populated"
            fi

  artifacts_test_results:
    docker:
      - image: python:3.6.0
    working_directory: ~/realitycheck
    steps:
      - checkout

      - run:
          name: Creating Dummy Artifacts
          command: |
            echo "my artifact file" > /tmp/artifact-1.txt;
            mkdir /tmp/artifacts;
            echo "my artifact files in a dir" > /tmp/artifacts/artifact-2.txt;

      - store_artifacts:
          path: /tmp/artifact-1.txt
          destination: artifact-file.txt

      - store_artifacts:
          path: /tmp/artifacts

      - store_test_results:
          path: test-results

  workspace-a:
    docker:
      - image: alpine
    parallelism: 2
    working_directory: ~/realitycheck
    steps:
      - run: |
          echo "workspace-a" > workspace-a.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-a.txt
      - run: |
          echo "workspace-a2" > workspace-a2.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-a2.txt

  workspace-b:
    machine: true
    resource_class: danmux/dans-mac
    parallelism: 2
    working_directory: ~/realitycheck
    steps:
      - run: |
          echo "workspace-b" > workspace-b.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-b.txt
      - run: |
          echo "workspace-b2" > workspace-b2.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-b2.txt

  workspace-c:
    docker:
      - image: alpine
    working_directory: ~/realitycheck
    steps:
      # verify we see a and b
      - run:
          name: Clean any existing
          command: |
            rm -rf ~/attached-workspace
      - attach_workspace:
          at: ~/attached-workspace
      - run:
          name: Verify a
          command: |
            [ "$(cat ~/attached-workspace/workspace-a.txt)" == 'workspace-a' ]
      - run:
          name: Verify a2
          command: |
            [ "$(cat ~/attached-workspace/workspace-a2.txt)" == 'workspace-a2' ]
      - run:
          name: Verify b
          command: |
            [ "$(cat ~/attached-workspace/workspace-b.txt)" == 'workspace-b' ]
      - run:
          name: Verify b2
          command: |
            [ "$(cat ~/attached-workspace/workspace-b2.txt)" == 'workspace-b2' ]
      # persist c
      - run: |
          echo "workspace-c" > workspace-c.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-c.txt
      # override a file from ws b file 
      - run: |
          echo "override-b2" > workspace-b2.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-b2.txt

  workspace-d:
    docker:
      - image: alpine
    working_directory: ~/realitycheck
    steps:
      # persist d
      - run: |
          echo "workspace-d" > workspace-d.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-d.txt

  workspace-r1:
    docker:
      - image: alpine
    working_directory: ~/realitycheck
    steps:
      # persist r1
      - run: |
          echo "workspace-r1" > workspace-r1-r2.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-r1-r2.txt

  workspace-r2:
    docker:
      - image: alpine
    working_directory: ~/realitycheck
    steps:
      # persist r2 to shared file
      - run: |
          echo "workspace-r1-r2" > workspace-r1-r2.txt
      - persist_to_workspace:
          root: .
          paths:
            - workspace-r1-r2.txt

  workspace-e-docker:
    docker:
      - image: alpine
    working_directory: ~/realitycheck
    steps:
      # verify we see a and b, c, c's override of b and d
      - run:
          name: Clean any existing
          command: |
            rm -rf ~/attached-workspace
      - attach_workspace:
          at: ~/attached-workspace
      - run:
          name: Verify a
          command: |
            [ "$(cat ~/attached-workspace/workspace-a.txt)" == 'workspace-a' ]
      - run:
          name: Verify a2
          command: |
            [ "$(cat ~/attached-workspace/workspace-a2.txt)" == 'workspace-a2' ]
      - run:
          name: Verify b
          command: |
            [ "$(cat ~/attached-workspace/workspace-b.txt)" == 'workspace-b' ]
      - run:
          name: Verify b2 overridden
          command: |
            [ "$(cat ~/attached-workspace/workspace-b2.txt)" == 'override-b2' ]
      - run:
          name: Verify d
          command: |
            [ "$(cat ~/attached-workspace/workspace-d.txt)" == 'workspace-d' ]

  # todo matrix-ify?
  workspace-e-runner:
    machine: true
    resource_class: danmux/dans-mac
    working_directory: ~/realitycheck
    steps:
      # verify we see a and b, c, c's override of b and d
      - run:
          name: Clean any existing
          command: |
            rm -rf ~/attached-workspace
      - attach_workspace:
          at: ~/attached-workspace
      - run:
          name: Verify a
          command: |
            [ "$(cat ~/attached-workspace/workspace-a.txt)" == 'workspace-a' ]
      - run:
          name: Verify a2
          command: |
            [ "$(cat ~/attached-workspace/workspace-a2.txt)" == 'workspace-a2' ]
      - run:
          name: Verify b
          command: |
            [ "$(cat ~/attached-workspace/workspace-b.txt)" == 'workspace-b' ]
      - run:
          name: Verify b2 overridden
          command: |
            [ "$(cat ~/attached-workspace/workspace-b2.txt)" == 'override-b2' ]
      - run:
          name: Verify d
          command: |
            [ "$(cat ~/attached-workspace/workspace-d.txt)" == 'workspace-d' ]

  workspace-r-docker:
    docker:
      - image: alpine
    working_directory: ~/realitycheck
    steps:
      # this will fail due to file conflicts
      - attach_workspace:
          at: ~/attached-workspace

  # todo matrix-ify?
  workspace-r-runner:
    machine: true
    resource_class: danmux/dans-mac
    working_directory: ~/realitycheck
    steps:
      - run:
          name: Clean any existing
          command: |
            rm -rf ~/attached-workspace
      # this will fail due to file conflicts
      - attach_workspace:
          at: ~/attached-workspace

workflows:
  version: 2
  resource_class_jobs:
    jobs:
      - small
      - medium
      - medium+
      - large
      - xlarge

  vm_jobs:
    jobs:
      - machine
      - remote_docker
      - docker_layer_caching
      - machine_dlc
      - runner

  feature_jobs:
    jobs:
      - save_and_restore_cache
      - contexts:
          context: org-global
      - multi-contexts:
          context: individual-local
      - write_workspace
      - read_workspace:
          requires:
            - write_workspace
      - artifacts_test_results
  
  complex-workspace:
    jobs:
      - workspace-a
      - workspace-b
      - workspace-c:
          requires:
            - workspace-a
            - workspace-b
      - workspace-d
      - workspace-r1
      - workspace-r2
      - workspace-e-docker:
          requires:
            - workspace-c
            - workspace-d
      - workspace-e-runner:
          requires:
            - workspace-c
            - workspace-d
      - workspace-r-docker:
          requires:
            - workspace-r1
            - workspace-r2
      - workspace-r-runner:
          requires:
            - workspace-c
            - workspace-d
            - workspace-r1
            - workspace-r2

